<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.IAlbanil_test1&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:theme=&quot;@style/Theme.IAlbanil_test1&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.IAlbanil_test1&quot;&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MainActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&#13;&#10;            android:theme=&quot;@style/Theme.IAlbanil_test1&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/ialbanil_test1/CameraFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/ialbanil_test1/CameraFragment.kt" />
              <option name="originalContent" value="package com.example.ialbanil_test1&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.graphics.Bitmap&#10;import android.util.Base64&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.camera.core.CameraSelector&#10;import androidx.camera.core.ImageCapture&#10;import androidx.camera.core.ImageCaptureException&#10;import androidx.camera.core.ImageProxy&#10;import android.widget.Toast&#10;import androidx.camera.lifecycle.ProcessCameraProvider&#10;import androidx.core.app.ActivityCompat&#10;import androidx.core.content.ContextCompat&#10;import androidx.fragment.app.Fragment&#10;import com.example.ialbanil_test1.databinding.FragmentCameraBinding&#10;import com.google.mlkit.vision.common.InputImage&#10;import com.google.mlkit.vision.label.ImageLabeling&#10;import com.google.mlkit.vision.label.defaults.ImageLabelerOptions&#10;import com.google.mlkit.vision.label.ImageLabel&#10;import java.util.concurrent.ExecutorService&#10;import java.util.concurrent.Executors&#10;&#10;class CameraFragment : Fragment() {&#10;    private var _binding: FragmentCameraBinding? = null&#10;    private val binding get() = _binding!!&#10;    private lateinit var cameraExecutor: ExecutorService&#10;    private var imageCapture: ImageCapture? = null&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        _binding = FragmentCameraBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        if (allPermissionsGranted()) {&#10;            startCamera()&#10;        } else {&#10;            ActivityCompat.requestPermissions(&#10;                requireActivity(),&#10;                arrayOf(Manifest.permission.CAMERA),&#10;                REQUEST_CODE_PERMISSIONS&#10;            )&#10;        }&#10;        cameraExecutor = Executors.newSingleThreadExecutor()&#10;        binding.btnCapture.setOnClickListener {&#10;            takePhoto()&#10;        }&#10;    }&#10;&#10;    private fun startCamera() {&#10;        val cameraProviderFuture = ProcessCameraProvider.getInstance(requireContext())&#10;        cameraProviderFuture.addListener({&#10;            val cameraProvider = cameraProviderFuture.get()&#10;            val preview = Preview.Builder().build().also {&#10;                it.setSurfaceProvider(binding.previewView.surfaceProvider)&#10;            }&#10;            imageCapture = ImageCapture.Builder().build()&#10;            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA&#10;            try {&#10;                cameraProvider.unbindAll()&#10;                cameraProvider.bindToLifecycle(&#10;                    this, cameraSelector, preview, imageCapture&#10;                )&#10;            } catch (exc: Exception) {&#10;                Log.e(TAG, &quot;Error al iniciar la cámara&quot;, exc)&#10;            }&#10;        }, ContextCompat.getMainExecutor(requireContext()))&#10;    }&#10;&#10;    private fun allPermissionsGranted() =&#10;        ContextCompat.checkSelfPermission(&#10;            requireContext(), Manifest.permission.CAMERA&#10;        ) == PackageManager.PERMISSION_GRANTED&#10;&#10;    private fun analyzeImage(bitmap: Bitmap) {&#10;        val image = InputImage.fromBitmap(bitmap, 0)&#10;        val labeler = ImageLabeling.getClient(ImageLabelerOptions.DEFAULT)&#10;        labeler.process(image)&#10;            .addOnSuccessListener { labels -&gt;&#10;                val suggestions = labels.map { label -&gt;&#10;                    &quot;Propuesta: ${label.text} (confianza: ${&quot;%.2f&quot;.format(label.confidence)})&quot;&#10;                }&#10;                mostrarSugerencias(suggestions)&#10;            }&#10;            .addOnFailureListener { e -&gt;&#10;                Toast.makeText(requireContext(), &quot;Error en el análisis&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;    }&#10;&#10;    private fun mostrarSugerencias(sugerencias: List&lt;String&gt;) {&#10;        val mensaje = sugerencias.joinToString(&quot;\n&quot;)&#10;        Toast.makeText(requireContext(), mensaje, Toast.LENGTH_LONG).show()&#10;    }&#10;&#10;    private fun takePhoto() {&#10;        val imageCapture = imageCapture ?: return&#10;        imageCapture.takePicture(cameraExecutor, object : ImageCapture.OnImageCapturedCallback() {&#10;            override fun onCaptureSuccess(image: ImageProxy) {&#10;                val bitmap = imageProxyToBitmap(image)&#10;                image.close()&#10;                if (bitmap != null) {&#10;                    analyzeImage(bitmap)&#10;                } else {&#10;                    Toast.makeText(requireContext(), &quot;No se pudo procesar la imagen&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;            override fun onError(exception: ImageCaptureException) {&#10;                Log.e(TAG, &quot;Error al capturar la foto&quot;, exception)&#10;            }&#10;        })&#10;    }&#10;&#10;    private fun imageProxyToBitmap(image: ImageProxy): Bitmap? {&#10;        val planeProxy = image.planes[0]&#10;        val buffer = planeProxy.buffer&#10;        val bytes = ByteArray(buffer.remaining())&#10;        buffer.get(bytes)&#10;        return android.graphics.BitmapFactory.decodeByteArray(bytes, 0, bytes.size)&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;        cameraExecutor.shutdown()&#10;    }&#10;&#10;    companion object {&#10;        private const val TAG = &quot;CameraFragment&quot;&#10;        private const val REQUEST_CODE_PERMISSIONS = 10&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.ialbanil_test1&#10;&#10;import android.Manifest&#10;import android.content.pm.PackageManager&#10;import android.graphics.Bitmap&#10;import android.util.Base64&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.camera.core.CameraSelector&#10;import androidx.camera.core.ImageCapture&#10;import androidx.camera.core.ImageCaptureException&#10;import androidx.camera.core.ImageProxy&#10;import android.widget.Toast&#10;import androidx.camera.lifecycle.ProcessCameraProvider&#10;import androidx.core.app.ActivityCompat&#10;import androidx.core.content.ContextCompat&#10;import androidx.fragment.app.Fragment&#10;import com.example.ialbanil_test1.databinding.FragmentCameraBinding&#10;import com.google.mlkit.vision.common.InputImage&#10;import com.google.mlkit.vision.label.ImageLabeling&#10;import com.google.mlkit.vision.label.defaults.ImageLabelerOptions&#10;import com.google.mlkit.vision.label.ImageLabel&#10;import java.util.concurrent.ExecutorService&#10;import java.util.concurrent.Executors&#10;&#10;class CameraFragment : Fragment() {&#10;    private var _binding: FragmentCameraBinding? = null&#10;    private val binding get() = _binding!!&#10;    private lateinit var cameraExecutor: ExecutorService&#10;    private var imageCapture: ImageCapture? = null&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        _binding = FragmentCameraBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;        if (allPermissionsGranted()) {&#10;            startCamera()&#10;        } else {&#10;            ActivityCompat.requestPermissions(&#10;                requireActivity(),&#10;                arrayOf(Manifest.permission.CAMERA),&#10;                REQUEST_CODE_PERMISSIONS&#10;            )&#10;        }&#10;        cameraExecutor = Executors.newSingleThreadExecutor()&#10;        binding.btnCapture.setOnClickListener {&#10;            takePhoto()&#10;        }&#10;    }&#10;&#10;    private fun startCamera() {&#10;        val cameraProviderFuture = ProcessCameraProvider.getInstance(requireContext())&#10;        cameraProviderFuture.addListener({&#10;            val cameraProvider = cameraProviderFuture.get()&#10;            val preview: Preview = Preview.Builder().build().also {&#10;                it.setSurfaceProvider(binding.previewView.surfaceProvider)&#10;            }&#10;            imageCapture = ImageCapture.Builder().build()&#10;            val cameraSelector = CameraSelector.DEFAULT_BACK_CAMERA&#10;            try {&#10;                cameraProvider.unbindAll()&#10;                cameraProvider.bindToLifecycle(&#10;                    this, cameraSelector, preview, imageCapture&#10;                )&#10;            } catch (exc: Exception) {&#10;                Log.e(TAG, &quot;Error al iniciar la cámara&quot;, exc)&#10;            }&#10;        }, ContextCompat.getMainExecutor(requireContext()))&#10;    }&#10;&#10;    private fun allPermissionsGranted() =&#10;        ContextCompat.checkSelfPermission(&#10;            requireContext(), Manifest.permission.CAMERA&#10;        ) == PackageManager.PERMISSION_GRANTED&#10;&#10;    private fun analyzeImage(bitmap: Bitmap) {&#10;        val image = InputImage.fromBitmap(bitmap, 0)&#10;        val labeler = ImageLabeling.getClient(ImageLabelerOptions.DEFAULT)&#10;        labeler.process(image)&#10;            .addOnSuccessListener { labels -&gt;&#10;                val suggestions = labels.map { label -&gt;&#10;                    &quot;Propuesta: ${label.text} (confianza: ${&quot;%.2f&quot;.format(label.confidence)})&quot;&#10;                }&#10;                mostrarSugerencias(suggestions)&#10;            }&#10;            .addOnFailureListener { e -&gt;&#10;                Toast.makeText(requireContext(), &quot;Error en el análisis&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;    }&#10;&#10;    private fun mostrarSugerencias(sugerencias: List&lt;String&gt;) {&#10;        val mensaje = sugerencias.joinToString(&quot;\n&quot;)&#10;        Toast.makeText(requireContext(), mensaje, Toast.LENGTH_LONG).show()&#10;    }&#10;&#10;    private fun takePhoto() {&#10;        val imageCapture = imageCapture ?: return&#10;        imageCapture.takePicture(cameraExecutor, object : ImageCapture.OnImageCapturedCallback() {&#10;            override fun onCaptureSuccess(image: ImageProxy) {&#10;                val bitmap = imageProxyToBitmap(image)&#10;                image.close()&#10;                if (bitmap != null) {&#10;                    analyzeImage(bitmap)&#10;                } else {&#10;                    Toast.makeText(requireContext(), &quot;No se pudo procesar la imagen&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;            override fun onError(exception: ImageCaptureException) {&#10;                Log.e(TAG, &quot;Error al capturar la foto&quot;, exception)&#10;            }&#10;        })&#10;    }&#10;&#10;    private fun imageProxyToBitmap(image: ImageProxy): Bitmap? {&#10;        val planeProxy = image.planes[0]&#10;        val buffer = planeProxy.buffer&#10;        val bytes = ByteArray(buffer.remaining())&#10;        buffer.get(bytes)&#10;        return android.graphics.BitmapFactory.decodeByteArray(bytes, 0, bytes.size)&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;        cameraExecutor.shutdown()&#10;    }&#10;&#10;    companion object {&#10;        private const val TAG = &quot;CameraFragment&quot;&#10;        private const val REQUEST_CODE_PERMISSIONS = 10&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_camera.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_camera.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#10;&#10;    &lt;!-- Aquí irá la vista previa de la cámara en el futuro --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tv_camera_placeholder&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Vista de cámara (próximamente)&quot;&#10;        android:layout_gravity=&quot;center&quot; /&gt;&#10;&#10;    &lt;androidx.camera.view.PreviewView&#10;        android:id=&quot;@+id/previewView&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot; /&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btn_capture&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;Capturar&quot;&#10;        android:layout_gravity=&quot;bottom|center_horizontal&quot;&#10;        android:layout_marginBottom=&quot;32dp&quot; /&gt;&#10;&#10;&lt;/FrameLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    android:layout_width=&quot;match_parent&quot;&#13;&#10;    android:layout_height=&quot;match_parent&quot;&gt;&#13;&#10;&#13;&#10;    &lt;androidx.camera.view.PreviewView&#13;&#10;        android:id=&quot;@+id/previewView&quot;&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;match_parent&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#13;&#10;        android:id=&quot;@+id/btn_capture&quot;&#13;&#10;        android:layout_width=&quot;wrap_content&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:layout_gravity=&quot;bottom|center_horizontal&quot;&#13;&#10;        android:layout_marginBottom=&quot;32dp&quot;&#13;&#10;        android:contentDescription=&quot;Capturar&quot;&#13;&#10;        android:src=&quot;@android:drawable/ic_menu_camera&quot;&#13;&#10;        android:tint=&quot;@android:color/white&quot;&#13;&#10;        /&gt;&#13;&#10;&#13;&#10;&lt;/FrameLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>