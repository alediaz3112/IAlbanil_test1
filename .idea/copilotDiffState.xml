<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.ialbanil_test1&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.ialbanil_test1&quot;&#10;        minSdk = 35&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        viewBinding = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.androidx.constraintlayout)&#10;    implementation(libs.androidx.navigation.fragment.ktx)&#10;    implementation(libs.androidx.navigation.ui.ktx)&#10;    implementation(&quot;androidx.camera:camera-camera2:1.3.0&quot;)&#10;    implementation(&quot;androidx.camera:camera-lifecycle:1.3.0&quot;)&#10;    implementation(&quot;androidx.camera:camera-view:1.3.0&quot;)&#10;    implementation(&quot;com.google.mlkit:image-labeling:17.0.7&quot;)&#10;    implementation(&quot;org.tensorflow:tensorflow-lite:2.13.0&quot;)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;}" />
              <option name="updatedContent" value="plugins {&#10;    alias(libs.plugins.android.application)&#10;    alias(libs.plugins.kotlin.android)&#10;}&#10;&#10;android {&#10;    namespace = &quot;com.example.ialbanil_test1&quot;&#10;    compileSdk = 36&#10;&#10;    defaultConfig {&#10;        applicationId = &quot;com.example.ialbanil_test1&quot;&#10;        minSdk = 35&#10;        targetSdk = 36&#10;        versionCode = 1&#10;        versionName = &quot;1.0&quot;&#10;&#10;        testInstrumentationRunner = &quot;androidx.test.runner.AndroidJUnitRunner&quot;&#10;    }&#10;&#10;    buildTypes {&#10;        release {&#10;            isMinifyEnabled = false&#10;            proguardFiles(&#10;                getDefaultProguardFile(&quot;proguard-android-optimize.txt&quot;),&#10;                &quot;proguard-rules.pro&quot;&#10;            )&#10;        }&#10;    }&#10;    compileOptions {&#10;        sourceCompatibility = JavaVersion.VERSION_11&#10;        targetCompatibility = JavaVersion.VERSION_11&#10;    }&#10;    kotlinOptions {&#10;        jvmTarget = &quot;11&quot;&#10;    }&#10;    buildFeatures {&#10;        viewBinding = true&#10;    }&#10;}&#10;&#10;dependencies {&#10;&#10;    implementation(libs.androidx.core.ktx)&#10;    implementation(libs.androidx.appcompat)&#10;    implementation(libs.material)&#10;    implementation(libs.androidx.constraintlayout)&#10;    implementation(libs.androidx.navigation.fragment.ktx)&#10;    implementation(libs.androidx.navigation.ui.ktx)&#10;    implementation(&quot;androidx.camera:camera-camera2:1.3.0&quot;)&#10;    implementation(&quot;androidx.camera:camera-lifecycle:1.3.0&quot;)&#10;    implementation(&quot;androidx.camera:camera-view:1.3.0&quot;)&#10;    implementation(&quot;com.google.mlkit:image-labeling:17.0.7&quot;)&#10;    implementation(&quot;org.tensorflow:tensorflow-lite:2.13.0&quot;)&#10;    implementation(&quot;org.tensorflow:tensorflow-lite-support:0.4.4&quot;)&#10;    testImplementation(libs.junit)&#10;    androidTestImplementation(libs.androidx.junit)&#10;    androidTestImplementation(libs.androidx.espresso.core)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.IAlbanil_test1&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:theme=&quot;@style/Theme.IAlbanil_test1&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;&#13;&#10;    &lt;uses-permission android:name=&quot;android.permission.CAMERA&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.IAlbanil_test1&quot;&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MainActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&#13;&#10;            android:theme=&quot;@style/Theme.IAlbanil_test1&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.settings.SettingsActivity&quot;&#13;&#10;            android:exported=&quot;false&quot; /&gt;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/ialbanil_test1/DisclaimerFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/ialbanil_test1/DisclaimerFragment.kt" />
              <option name="updatedContent" value="package com.example.ialbanil_test1&#10;&#10;import android.os.Bundle&#10;import androidx.fragment.app.Fragment&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;&#10;class DisclaimerFragment : Fragment() {&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        return inflater.inflate(R.layout.fragment_disclaimer, container, false)&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/ialbanil_test1/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/ialbanil_test1/MainActivity.kt" />
              <option name="originalContent" value="package com.example.ialbanil_test1&#10;&#10;import android.os.Bundle&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.navigation.findNavController&#10;import androidx.navigation.ui.AppBarConfiguration&#10;import androidx.navigation.ui.navigateUp&#10;import androidx.navigation.ui.setupActionBarWithNavController&#10;import android.view.Menu&#10;import android.view.MenuItem&#10;import com.example.ialbanil_test1.databinding.ActivityMainBinding&#10;&#10;class MainActivity : AppCompatActivity() {&#10;&#10;    private lateinit var appBarConfiguration: AppBarConfiguration&#10;    private lateinit var binding: ActivityMainBinding&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Mostrar selector de motor de análisis antes de cualquier cosa&#10;        com.example.ialbanil_test1.model.showEngineSelector(this) {}&#10;&#10;        // Modo inmersivo para pantalla completa&#10;        window.decorView.systemUiVisibility = (&#10;            android.view.View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY&#10;            or android.view.View.SYSTEM_UI_FLAG_FULLSCREEN&#10;            or android.view.View.SYSTEM_UI_FLAG_HIDE_NAVIGATION&#10;        )&#10;&#10;        binding = ActivityMainBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;&#10;        setSupportActionBar(binding.toolbar)&#10;&#10;        val navController = findNavController(R.id.nav_host_fragment_content_main)&#10;        appBarConfiguration = AppBarConfiguration(navController.graph)&#10;        setupActionBarWithNavController(navController, appBarConfiguration)&#10;&#10;        binding.fab.setOnClickListener {&#10;            // Mostrar diálogo para elegir entre cámara y galería&#10;            val options = arrayOf(&quot;Abrir cámara&quot;, &quot;Importar desde galería&quot;)&#10;            android.app.AlertDialog.Builder(this)&#10;                .setTitle(&quot;Selecciona una opción&quot;)&#10;                .setItems(options) { _, which -&gt;&#10;                    when (which) {&#10;                        0 -&gt; {&#10;                            android.util.Log.d(&quot;MainActivity&quot;, &quot;Opción cámara seleccionada&quot;)&#10;                            navController.navigate(R.id.action_DisclaimerFragment_to_CameraFragment)&#10;                        }&#10;                        1 -&gt; {&#10;                            android.util.Log.d(&quot;MainActivity&quot;, &quot;Opción galería seleccionada&quot;)&#10;                            openGallery()&#10;                        }&#10;                    }&#10;                }&#10;                .show()&#10;        }&#10;    }&#10;&#10;    private val PICK_IMAGE_REQUEST = 1001&#10;&#10;    private fun openGallery() {&#10;        val intent = android.content.Intent(android.content.Intent.ACTION_PICK)&#10;        intent.type = &quot;image/*&quot;&#10;        startActivityForResult(intent, PICK_IMAGE_REQUEST)&#10;    }&#10;&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: android.content.Intent?) {&#10;        super.onActivityResult(requestCode, resultCode, data)&#10;        if (requestCode == PICK_IMAGE_REQUEST &amp;&amp; resultCode == android.app.Activity.RESULT_OK) {&#10;            val imageUri = data?.data&#10;            imageUri?.let {&#10;                // Procesar automáticamente la imagen importada&#10;                com.example.ialbanil_test1.model.processImportedImage(it, this)&#10;                android.widget.Toast.makeText(this, &quot;Imagen importada desde galería&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onCreateOptionsMenu(menu: Menu): Boolean {&#10;        // Inflate the menu; this adds items to the action bar if it is present.&#10;        menuInflater.inflate(R.menu.menu_main, menu)&#10;        return true&#10;    }&#10;&#10;    override fun onOptionsItemSelected(item: MenuItem): Boolean {&#10;        return when (item.itemId) {&#10;            R.id.action_settings -&gt; {&#10;                val intent = android.content.Intent(this, com.example.ialbanil_test1.settings.SettingsActivity::class.java)&#10;                startActivity(intent)&#10;                true&#10;            }&#10;            else -&gt; super.onOptionsItemSelected(item)&#10;        }&#10;    }&#10;&#10;    override fun onSupportNavigateUp(): Boolean {&#10;        val navController = findNavController(R.id.nav_host_fragment_content_main)&#10;        return navController.navigateUp(appBarConfiguration)&#10;                || super.onSupportNavigateUp()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.ialbanil_test1&#10;&#10;import android.os.Bundle&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.navigation.findNavController&#10;import androidx.navigation.ui.AppBarConfiguration&#10;import androidx.navigation.ui.navigateUp&#10;import androidx.navigation.ui.setupActionBarWithNavController&#10;import android.view.Menu&#10;import android.view.MenuItem&#10;import com.example.ialbanil_test1.databinding.ActivityMainBinding&#10;&#10;class MainActivity : AppCompatActivity() {&#10;&#10;    private lateinit var appBarConfiguration: AppBarConfiguration&#10;    private lateinit var binding: ActivityMainBinding&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // Mostrar selector de motor de análisis antes de cualquier cosa&#10;        com.example.ialbanil_test1.model.showEngineSelector(this) {}&#10;&#10;        // Modo inmersivo para pantalla completa&#10;        window.decorView.systemUiVisibility = (&#10;            android.view.View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY&#10;            or android.view.View.SYSTEM_UI_FLAG_FULLSCREEN&#10;            or android.view.View.SYSTEM_UI_FLAG_HIDE_NAVIGATION&#10;        )&#10;&#10;        binding = ActivityMainBinding.inflate(layoutInflater)&#10;        setContentView(binding.root)&#10;&#10;        setSupportActionBar(binding.toolbar)&#10;&#10;        val navController = findNavController(R.id.nav_host_fragment_content_main)&#10;        appBarConfiguration = AppBarConfiguration(navController.graph)&#10;        setupActionBarWithNavController(navController, appBarConfiguration)&#10;&#10;        binding.fab.setOnClickListener {&#10;            // Mostrar diálogo para elegir entre cámara y galería&#10;            val options = arrayOf(&quot;Abrir cámara&quot;, &quot;Importar desde galería&quot;)&#10;            android.app.AlertDialog.Builder(this)&#10;                .setTitle(&quot;Selecciona una opción&quot;)&#10;                .setItems(options) { _, which -&gt;&#10;                    when (which) {&#10;                        0 -&gt; {&#10;                            android.util.Log.d(&quot;MainActivity&quot;, &quot;Opción cámara seleccionada&quot;)&#10;                            val currentDestination = navController.currentDestination?.id&#10;                            if (currentDestination == R.id.DisclaimerFragment) {&#10;                                navController.navigate(R.id.action_DisclaimerFragment_to_CameraFragment)&#10;                            } else {&#10;                                android.util.Log.d(&quot;MainActivity&quot;, &quot;Ya estás en CameraFragment, no se navega&quot;)&#10;                            }&#10;                        }&#10;                        1 -&gt; {&#10;                            android.util.Log.d(&quot;MainActivity&quot;, &quot;Opción galería seleccionada&quot;)&#10;                            openGallery()&#10;                        }&#10;                    }&#10;                }&#10;                .show()&#10;        }&#10;    }&#10;&#10;    private val PICK_IMAGE_REQUEST = 1001&#10;&#10;    private fun openGallery() {&#10;        val intent = android.content.Intent(android.content.Intent.ACTION_PICK)&#10;        intent.type = &quot;image/*&quot;&#10;        startActivityForResult(intent, PICK_IMAGE_REQUEST)&#10;    }&#10;&#10;    override fun onActivityResult(requestCode: Int, resultCode: Int, data: android.content.Intent?) {&#10;        super.onActivityResult(requestCode, resultCode, data)&#10;        if (requestCode == PICK_IMAGE_REQUEST &amp;&amp; resultCode == android.app.Activity.RESULT_OK) {&#10;            val imageUri = data?.data&#10;            imageUri?.let {&#10;                // Procesar automáticamente la imagen importada&#10;                com.example.ialbanil_test1.model.processImportedImage(it, this)&#10;                android.widget.Toast.makeText(this, &quot;Imagen importada desde galería&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onCreateOptionsMenu(menu: Menu): Boolean {&#10;        // Inflate the menu; this adds items to the action bar if it is present.&#10;        menuInflater.inflate(R.menu.menu_main, menu)&#10;        return true&#10;    }&#10;&#10;    override fun onOptionsItemSelected(item: MenuItem): Boolean {&#10;        return when (item.itemId) {&#10;            R.id.action_settings -&gt; {&#10;                val intent = android.content.Intent(this, com.example.ialbanil_test1.settings.SettingsActivity::class.java)&#10;                startActivity(intent)&#10;                true&#10;            }&#10;            else -&gt; super.onOptionsItemSelected(item)&#10;        }&#10;    }&#10;&#10;    override fun onSupportNavigateUp(): Boolean {&#10;        val navController = findNavController(R.id.nav_host_fragment_content_main)&#10;        return navController.navigateUp(appBarConfiguration)&#10;                || super.onSupportNavigateUp()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/ialbanil_test1/api/ConstructionApi.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/ialbanil_test1/api/ConstructionApi.kt" />
              <option name="updatedContent" value="package com.example.ialbanil_test1.api&#10;&#10;// Base para consumir APIs de construcción agrupadas por familias&#10;&#10;interface ConstructionApi {&#10;    suspend fun fetchData(query: String): Any&#10;}&#10;&#10;class StructureApi : ConstructionApi {&#10;    override suspend fun fetchData(query: String): Any {&#10;        // Implementación futura para pisos, paredes, techo, aberturas, ladrillos, columnas, vigas&#10;        return Any()&#10;    }&#10;}&#10;&#10;class DecorationApi : ConstructionApi {&#10;    override suspend fun fetchData(query: String): Any {&#10;        // Implementación futura para pintura, revestimientos, cerámicos, muebles grandes&#10;        return Any()&#10;    }&#10;}&#10;&#10;class MaterialCalculatorApi : ConstructionApi {&#10;    override suspend fun fetchData(query: String): Any {&#10;        // Implementación futura para cálculos de materiales y medidas&#10;        return Any()&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/ialbanil_test1/model/ElementFamily.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/ialbanil_test1/model/ElementFamily.kt" />
              <option name="originalContent" value="package com.example.ialbanil_test1.model&#10;&#10;// Familias de elementos detectados por la cámara&#10;sealed class ElementFamily(val name: String) {&#10;    object Structure : ElementFamily(&quot;Estructura&quot;) // pared, suelo, techo, aberturas, ladrillos, columnas, vigas&#10;    object Decoration : ElementFamily(&quot;Decoración&quot;) // pintura, revestimientos, cerámicos, muebles grandes&#10;    object NotRelevant : ElementFamily(&quot;No relevante&quot;) // personas, animales, objetos pequeños&#10;}&#10;&#10;// Tipos de elementos detectables&#10;enum class ElementType(val family: ElementFamily) {&#10;    PARED(ElementFamily.Structure),&#10;    SUELO(ElementFamily.Structure),&#10;    TECHO(ElementFamily.Structure),&#10;    ABERTURA(ElementFamily.Structure),&#10;    LADRILLO(ElementFamily.Structure),&#10;    COLUMNA(ElementFamily.Structure),&#10;    VIGA(ElementFamily.Structure),&#10;    PINTURA(ElementFamily.Decoration),&#10;    REVESTIMIENTO(ElementFamily.Decoration),&#10;    CERAMICO(ElementFamily.Decoration),&#10;    MUEBLE_GRANDE(ElementFamily.Decoration),&#10;    PERSONA(ElementFamily.NotRelevant),&#10;    ANIMAL(ElementFamily.NotRelevant),&#10;    OBJETO_CHICO(ElementFamily.NotRelevant),&#10;    IMAGEN_GALERIA(ElementFamily.NotRelevant) // Nuevo tipo para imágenes importadas&#10;}&#10;&#10;// Función para obtener la familia desde el tipo detectado&#10;fun ElementType.getFamilyName(): String {&#10;    return this.family.name&#10;}&#10;&#10;// Estructura base para ML Kit&#10;object MLKitAnalyzer {&#10;    fun analyzeImage(uri: android.net.Uri, context: android.content.Context) {&#10;        android.widget.Toast.makeText(context, &quot;Análisis con ML Kit&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;    }&#10;}&#10;&#10;// Estructura base para TensorFlow Lite&#10;object TFLiteAnalyzer {&#10;    fun analyzeImage(uri: android.net.Uri, context: android.content.Context) {&#10;        android.widget.Toast.makeText(context, &quot;Análisis con TensorFlow Lite&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;    }&#10;}&#10;&#10;// Función para elegir el motor de análisis&#10;enum class AnalyzerEngine {&#10;    ML_KIT, TFLITE&#10;}&#10;&#10;private var selectedEngine: AnalyzerEngine? = null&#10;&#10;fun getSelectedEngine(context: android.content.Context): AnalyzerEngine {&#10;    val prefs = context.getSharedPreferences(&quot;settings&quot;, android.content.Context.MODE_PRIVATE)&#10;    val value = prefs.getString(&quot;engine&quot;, null)&#10;    return when (value) {&#10;        &quot;ML_KIT&quot; -&gt; AnalyzerEngine.ML_KIT&#10;        &quot;TFLITE&quot; -&gt; AnalyzerEngine.TFLITE&#10;        else -&gt; AnalyzerEngine.ML_KIT // valor por defecto&#10;    }&#10;}&#10;&#10;fun setSelectedEngine(context: android.content.Context, engine: AnalyzerEngine) {&#10;    val prefs = context.getSharedPreferences(&quot;settings&quot;, android.content.Context.MODE_PRIVATE)&#10;    prefs.edit().putString(&quot;engine&quot;, engine.name).apply()&#10;    selectedEngine = engine&#10;}&#10;&#10;fun showEngineSelector(context: android.content.Context, onSelected: (AnalyzerEngine) -&gt; Unit) {&#10;    val options = arrayOf(&quot;ML Kit&quot;, &quot;TensorFlow Lite&quot;)&#10;    android.app.AlertDialog.Builder(context)&#10;        .setTitle(&quot;Selecciona motor de análisis&quot;)&#10;        .setItems(options) { _, which -&gt;&#10;            val engine = if (which == 0) AnalyzerEngine.ML_KIT else AnalyzerEngine.TFLITE&#10;            setSelectedEngine(context, engine)&#10;            onSelected(engine)&#10;        }&#10;        .setCancelable(false)&#10;        .show()&#10;}&#10;&#10;fun processImportedImage(uri: android.net.Uri, context: android.content.Context) {&#10;    val tipo = ElementType.IMAGEN_GALERIA&#10;    val familia = tipo.getFamilyName()&#10;    val engine = getSelectedEngine(context)&#10;    when (engine) {&#10;        AnalyzerEngine.ML_KIT -&gt; MLKitAnalyzer.analyzeImage(uri, context)&#10;        AnalyzerEngine.TFLITE -&gt; TFLiteAnalyzer.analyzeImage(uri, context)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.ialbanil_test1.model&#10;&#10;// Familias de elementos detectados por la cámara&#10;sealed class ElementFamily(val name: String) {&#10;    object Structure : ElementFamily(&quot;Estructura&quot;) // pared, suelo, techo, aberturas, ladrillos, columnas, vigas&#10;    object Decoration : ElementFamily(&quot;Decoración&quot;) // pintura, revestimientos, cerámicos, muebles grandes&#10;    object NotRelevant : ElementFamily(&quot;No relevante&quot;) // personas, animales, objetos pequeños&#10;}&#10;&#10;// Tipos de elementos detectables&#10;enum class ElementType(val family: ElementFamily) {&#10;    PARED(ElementFamily.Structure),&#10;    SUELO(ElementFamily.Structure),&#10;    TECHO(ElementFamily.Structure),&#10;    ABERTURA(ElementFamily.Structure),&#10;    LADRILLO(ElementFamily.Structure),&#10;    COLUMNA(ElementFamily.Structure),&#10;    VIGA(ElementFamily.Structure),&#10;    PINTURA(ElementFamily.Decoration),&#10;    REVESTIMIENTO(ElementFamily.Decoration),&#10;    CERAMICO(ElementFamily.Decoration),&#10;    MUEBLE_GRANDE(ElementFamily.Decoration),&#10;    PERSONA(ElementFamily.NotRelevant),&#10;    ANIMAL(ElementFamily.NotRelevant),&#10;    OBJETO_CHICO(ElementFamily.NotRelevant),&#10;    IMAGEN_GALERIA(ElementFamily.NotRelevant) // Nuevo tipo para imágenes importadas&#10;}&#10;&#10;// Función para obtener la familia desde el tipo detectado&#10;fun ElementType.getFamilyName(): String {&#10;    return this.family.name&#10;}&#10;&#10;// Estructura base para ML Kit&#10;object MLKitAnalyzer {&#10;    fun analyzeImage(uri: android.net.Uri, context: android.content.Context) {&#10;        android.widget.Toast.makeText(context, &quot;Análisis con ML Kit&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;    }&#10;}&#10;&#10;// Estructura base para TensorFlow Lite&#10;object TFLiteAnalyzer {&#10;    fun analyzeImage(uri: android.net.Uri, context: android.content.Context) {&#10;        android.widget.Toast.makeText(context, &quot;Análisis con TensorFlow Lite&quot;, android.widget.Toast.LENGTH_SHORT).show()&#10;    }&#10;}&#10;&#10;// Función para elegir el motor de análisis&#10;enum class AnalyzerEngine {&#10;    ML_KIT, TFLITE&#10;}&#10;&#10;private var selectedEngine: AnalyzerEngine? = null&#10;&#10;fun getSelectedEngine(context: android.content.Context): AnalyzerEngine {&#10;    val prefs = context.getSharedPreferences(&quot;settings&quot;, android.content.Context.MODE_PRIVATE)&#10;    val value = prefs.getString(&quot;engine&quot;, null)&#10;    return when (value) {&#10;        &quot;ML_KIT&quot; -&gt; AnalyzerEngine.ML_KIT&#10;        &quot;TFLITE&quot; -&gt; AnalyzerEngine.TFLITE&#10;        else -&gt; AnalyzerEngine.TFLITE // valor por defecto ahora es TensorFlow Lite&#10;    }&#10;}&#10;&#10;fun setSelectedEngine(context: android.content.Context, engine: AnalyzerEngine) {&#10;    val prefs = context.getSharedPreferences(&quot;settings&quot;, android.content.Context.MODE_PRIVATE)&#10;    prefs.edit().putString(&quot;engine&quot;, engine.name).apply()&#10;    selectedEngine = engine&#10;}&#10;&#10;fun showEngineSelector(context: android.content.Context, onSelected: (AnalyzerEngine) -&gt; Unit) {&#10;    val options = arrayOf(&quot;ML Kit&quot;, &quot;TensorFlow Lite&quot;)&#10;    android.app.AlertDialog.Builder(context)&#10;        .setTitle(&quot;Selecciona motor de análisis&quot;)&#10;        .setItems(options) { _, which -&gt;&#10;            val engine = if (which == 0) AnalyzerEngine.ML_KIT else AnalyzerEngine.TFLITE&#10;            setSelectedEngine(context, engine)&#10;            onSelected(engine)&#10;        }&#10;        .setCancelable(false)&#10;        .show()&#10;}&#10;&#10;fun processImportedImage(uri: android.net.Uri, context: android.content.Context) {&#10;    val tipo = ElementType.IMAGEN_GALERIA&#10;    val familia = tipo.getFamilyName()&#10;    val engine = getSelectedEngine(context)&#10;    when (engine) {&#10;        AnalyzerEngine.ML_KIT -&gt; MLKitAnalyzer.analyzeImage(uri, context)&#10;        AnalyzerEngine.TFLITE -&gt; TFLiteAnalyzer.analyzeImage(uri, context)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/ialbanil_test1/settings/SettingsActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/ialbanil_test1/settings/SettingsActivity.kt" />
              <option name="originalContent" value="package com.example.ialbanil_test1.settings&#10;&#10;import android.os.Bundle&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.ialbanil_test1.model.AnalyzerEngine&#10;import com.example.ialbanil_test1.model.getSelectedEngine&#10;import com.example.ialbanil_test1.model.setSelectedEngine&#10;import com.example.ialbanil_test1.model.showEngineSelector&#10;import android.widget.TextView&#10;import android.widget.Button&#10;import android.widget.LinearLayout&#10;import android.view.ViewGroup&#10;import android.view.Gravity&#10;&#10;class SettingsActivity : AppCompatActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        val layout = LinearLayout(this)&#10;        layout.orientation = LinearLayout.VERTICAL&#10;        layout.gravity = Gravity.CENTER&#10;        layout.layoutParams = LinearLayout.LayoutParams(&#10;            ViewGroup.LayoutParams.MATCH_PARENT,&#10;            ViewGroup.LayoutParams.MATCH_PARENT&#10;        )&#10;&#10;        val engineLabel = TextView(this)&#10;        engineLabel.text = &quot;Motor de análisis actual: ${getSelectedEngine(this)}&quot;&#10;        engineLabel.textSize = 18f&#10;        engineLabel.gravity = Gravity.CENTER&#10;        layout.addView(engineLabel)&#10;&#10;        val changeEngineButton = Button(this)&#10;        changeEngineButton.text = &quot;Cambiar motor de análisis&quot;&#10;        changeEngineButton.setOnClickListener {&#10;            showEngineSelector(this) { engine -&gt;&#10;                setSelectedEngine(this, engine)&#10;                engineLabel.text = &quot;Motor de análisis actual: $engine&quot;&#10;            }&#10;        }&#10;        layout.addView(changeEngineButton)&#10;&#10;        // Aquí puedes agregar más opciones de configuración&#10;        // Ejemplo: idioma, tema, unidades, permisos, etc.&#10;&#10;        setContentView(layout)&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.ialbanil_test1.settings&#10;&#10;import android.os.Bundle&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.ialbanil_test1.model.AnalyzerEngine&#10;import com.example.ialbanil_test1.model.getSelectedEngine&#10;import com.example.ialbanil_test1.model.setSelectedEngine&#10;import com.example.ialbanil_test1.model.showEngineSelector&#10;import android.widget.TextView&#10;import android.widget.Button&#10;import android.widget.LinearLayout&#10;import android.view.ViewGroup&#10;import android.view.Gravity&#10;&#10;class SettingsActivity : AppCompatActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        val layout = LinearLayout(this)&#10;        layout.orientation = LinearLayout.VERTICAL&#10;        layout.gravity = Gravity.CENTER&#10;        layout.layoutParams = LinearLayout.LayoutParams(&#10;            ViewGroup.LayoutParams.MATCH_PARENT,&#10;            ViewGroup.LayoutParams.MATCH_PARENT&#10;        )&#10;&#10;        val engineLabel = TextView(this)&#10;        engineLabel.text = &quot;Motor de análisis actual: ${getSelectedEngine(this)}&quot;&#10;        engineLabel.textSize = 18f&#10;        engineLabel.gravity = Gravity.CENTER&#10;        layout.addView(engineLabel)&#10;&#10;        val changeEngineButton = Button(this)&#10;        changeEngineButton.text = &quot;Cambiar motor de análisis&quot;&#10;        changeEngineButton.setOnClickListener {&#10;            showEngineSelector(this) { engine -&gt;&#10;                setSelectedEngine(this, engine)&#10;                engineLabel.text = &quot;Motor de análisis actual: $engine&quot;&#10;            }&#10;        }&#10;        layout.addView(changeEngineButton)&#10;&#10;        // Ejemplo de otras opciones de configuración&#10;        val themeLabel = TextView(this)&#10;        themeLabel.text = &quot;Tema: Claro/Oscuro&quot;&#10;        themeLabel.textSize = 16f&#10;        themeLabel.gravity = Gravity.CENTER&#10;        layout.addView(themeLabel)&#10;&#10;        val languageLabel = TextView(this)&#10;        languageLabel.text = &quot;Idioma: Español&quot;&#10;        languageLabel.textSize = 16f&#10;        languageLabel.gravity = Gravity.CENTER&#10;        layout.addView(languageLabel)&#10;&#10;        val unitsLabel = TextView(this)&#10;        unitsLabel.text = &quot;Unidades: Métrico&quot;&#10;        unitsLabel.textSize = 16f&#10;        unitsLabel.gravity = Gravity.CENTER&#10;        layout.addView(unitsLabel)&#10;&#10;        val resetButton = Button(this)&#10;        resetButton.text = &quot;Restablecer configuración&quot;&#10;        resetButton.setOnClickListener {&#10;            setSelectedEngine(this, AnalyzerEngine.ML_KIT)&#10;            engineLabel.text = &quot;Motor de análisis actual: ML_KIT&quot;&#10;            // Aquí podrías restablecer otras preferencias&#10;        }&#10;        layout.addView(resetButton)&#10;&#10;        setContentView(layout)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/ialbanil_test1/tensor/TFLiteFamilyClassifier.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/ialbanil_test1/tensor/TFLiteFamilyClassifier.kt" />
              <option name="originalContent" value="package com.example.ialbanil_test1.tensor&#10;&#10;import android.content.Context&#10;import android.graphics.Bitmap&#10;import org.tensorflow.lite.Interpreter&#10;import java.nio.MappedByteBuffer&#10;&#10;class TFLiteFamilyClassifier(context: Context) {&#10;    private val interpreter: Interpreter&#10;    private val labels: List&lt;String&gt;&#10;&#10;    init {&#10;        // Carga el modelo .tflite desde assets (ejemplo: model_families.tflite)&#10;        val modelBuffer = context.assets.open(&quot;model_families.tflite&quot;).readBytes()&#10;        val byteBuffer = java.nio.ByteBuffer.allocateDirect(modelBuffer.size)&#10;        byteBuffer.order(java.nio.ByteOrder.nativeOrder())&#10;        byteBuffer.put(modelBuffer)&#10;        byteBuffer.rewind()&#10;        interpreter = Interpreter(byteBuffer)&#10;        // Carga las etiquetas desde assets (ejemplo: labels_families.txt)&#10;        labels = context.assets.open(&quot;labels_families.txt&quot;).bufferedReader().readLines()&#10;    }&#10;&#10;    fun classify(bitmap: Bitmap): String {&#10;        // Convierte el Bitmap a un ByteBuffer compatible con TensorFlow Lite&#10;        val input = bitmapToByteBuffer(bitmap)&#10;        val output = Array(1) { FloatArray(labels.size) }&#10;        interpreter.run(input, output)&#10;        val maxIdx = output[0].indices.maxByOrNull { output[0][it] } ?: 0&#10;        return labels[maxIdx]&#10;    }&#10;&#10;    private fun bitmapToByteBuffer(bitmap: Bitmap): java.nio.ByteBuffer {&#10;        val inputSize = bitmap.width * bitmap.height * 4&#10;        val byteBuffer = java.nio.ByteBuffer.allocateDirect(inputSize)&#10;        byteBuffer.order(java.nio.ByteOrder.nativeOrder())&#10;        val intValues = IntArray(bitmap.width * bitmap.height)&#10;        bitmap.getPixels(intValues, 0, bitmap.width, 0, 0, bitmap.width, bitmap.height)&#10;        for (pixelValue in intValues) {&#10;            byteBuffer.putFloat(((pixelValue shr 16) and 0xFF) / 255.0f)&#10;            byteBuffer.putFloat(((pixelValue shr 8) and 0xFF) / 255.0f)&#10;            byteBuffer.putFloat((pixelValue and 0xFF) / 255.0f)&#10;            byteBuffer.putFloat(((pixelValue shr 24) and 0xFF) / 255.0f)&#10;        }&#10;        return byteBuffer&#10;    }&#10;&#10;    fun classifyWithLabel(bitmap: Bitmap, extraInfo: String? = null): Bitmap {&#10;        val label = classify(bitmap)&#10;        val mutableBitmap = bitmap.copy(Bitmap.Config.ARGB_8888, true)&#10;        val canvas = android.graphics.Canvas(mutableBitmap)&#10;        val paint = android.graphics.Paint().apply {&#10;            color = android.graphics.Color.RED&#10;            textSize = 48f&#10;            style = android.graphics.Paint.Style.FILL&#10;            setShadowLayer(5f, 0f, 0f, android.graphics.Color.BLACK)&#10;        }&#10;        canvas.drawText(label, 20f, 60f, paint)&#10;        extraInfo?.let {&#10;            val infoPaint = android.graphics.Paint().apply {&#10;                color = android.graphics.Color.BLUE&#10;                textSize = 36f&#10;                style = android.graphics.Paint.Style.FILL&#10;                setShadowLayer(3f, 0f, 0f, android.graphics.Color.WHITE)&#10;            }&#10;            canvas.drawText(it, 20f, 110f, infoPaint)&#10;        }&#10;        return mutableBitmap&#10;    }&#10;&#10;    fun classifyAndShow(bitmap: Bitmap, imageView: android.widget.ImageView, extraInfo: String? = null) {&#10;        val labeledBitmap = classifyWithLabel(bitmap, extraInfo)&#10;        imageView.setImageBitmap(labeledBitmap)&#10;    }&#10;&#10;    fun saveCorrectionToDownload(context: Context, image: Bitmap, label: String, confidence: Float) {&#10;        val filename = &quot;correction_${System.currentTimeMillis()}.png&quot;&#10;        val file = android.os.Environment.getExternalStoragePublicDirectory(android.os.Environment.DIRECTORY_DOWNLOADS)&#10;        val imageFile = java.io.File(file, filename)&#10;        val fos = java.io.FileOutputStream(imageFile)&#10;        image.compress(Bitmap.CompressFormat.PNG, 100, fos)&#10;        fos.flush()&#10;        fos.close()&#10;        // Guarda la info en un archivo de texto&#10;        val infoFile = java.io.File(file, &quot;corrections.txt&quot;)&#10;        infoFile.appendText(&quot;$filename,$label,$confidence\n&quot;)&#10;    }&#10;&#10;    fun classifyWithConfidence(bitmap: Bitmap, context: Context, onResult: (String, Float) -&gt; Unit) {&#10;        val input = bitmapToByteBuffer(bitmap)&#10;        val output = Array(1) { FloatArray(labels.size) }&#10;        interpreter.run(input, output)&#10;        val maxIdx = output[0].indices.maxByOrNull { output[0][it] } ?: 0&#10;        val confidence = output[0][maxIdx]&#10;        val label = labels[maxIdx]&#10;        android.util.Log.d(&quot;TFLiteFamilyClassifier&quot;, &quot;Familia detectada: $label, confianza: $confidence&quot;)&#10;        if (confidence &lt; 0.9f) {&#10;            android.app.AlertDialog.Builder(context)&#10;                .setTitle(&quot;¿La familia detectada es correcta?&quot;)&#10;                .setMessage(&quot;Detectado: $label (confianza: ${(confidence * 100).toInt()}%)&quot;)&#10;                .setPositiveButton(&quot;Sí&quot;) { _, _ -&gt;&#10;                    saveCorrectionToDownload(context, bitmap, label, confidence)&#10;                    onResult(label, confidence)&#10;                }&#10;                .setNegativeButton(&quot;No&quot;) { _, _ -&gt;&#10;                    saveCorrectionToDownload(context, bitmap, &quot;Desconocido&quot;, confidence)&#10;                    onResult(&quot;Desconocido&quot;, confidence)&#10;                }&#10;                .show()&#10;        } else {&#10;            onResult(label, confidence)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.ialbanil_test1.tensor&#10;&#10;import android.content.Context&#10;import android.graphics.Bitmap&#10;import org.tensorflow.lite.Interpreter&#10;import java.nio.MappedByteBuffer&#10;&#10;class TFLiteFamilyClassifier(context: Context) {&#10;    private val interpreter: Interpreter&#10;    private val labels: List&lt;String&gt;&#10;&#10;    init {&#10;        // Carga el modelo .tflite desde assets (ejemplo: model_families.tflite)&#10;        val modelBuffer = context.assets.open(&quot;model_families.tflite&quot;).readBytes()&#10;        val byteBuffer = java.nio.ByteBuffer.allocateDirect(modelBuffer.size)&#10;        byteBuffer.order(java.nio.ByteOrder.nativeOrder())&#10;        byteBuffer.put(modelBuffer)&#10;        byteBuffer.rewind()&#10;        interpreter = Interpreter(byteBuffer)&#10;        // Carga las etiquetas desde assets (ejemplo: labels_families.txt)&#10;        labels = context.assets.open(&quot;labels_families.txt&quot;).bufferedReader().readLines()&#10;    }&#10;&#10;    fun classify(bitmap: Bitmap): String {&#10;        // Convierte el Bitmap a un ByteBuffer compatible con TensorFlow Lite&#10;        val input = bitmapToByteBuffer(bitmap)&#10;        val output = Array(1) { FloatArray(labels.size) }&#10;        interpreter.run(input, output)&#10;        val maxIdx = output[0].indices.maxByOrNull { output[0][it] } ?: 0&#10;        return labels[maxIdx]&#10;    }&#10;&#10;    private fun bitmapToByteBuffer(bitmap: Bitmap): java.nio.ByteBuffer {&#10;        val inputSize = bitmap.width * bitmap.height * 4&#10;        val byteBuffer = java.nio.ByteBuffer.allocateDirect(inputSize)&#10;        byteBuffer.order(java.nio.ByteOrder.nativeOrder())&#10;        val intValues = IntArray(bitmap.width * bitmap.height)&#10;        bitmap.getPixels(intValues, 0, bitmap.width, 0, 0, bitmap.width, bitmap.height)&#10;        for (pixelValue in intValues) {&#10;            byteBuffer.putFloat(((pixelValue shr 16) and 0xFF) / 255.0f)&#10;            byteBuffer.putFloat(((pixelValue shr 8) and 0xFF) / 255.0f)&#10;            byteBuffer.putFloat((pixelValue and 0xFF) / 255.0f)&#10;            byteBuffer.putFloat(((pixelValue shr 24) and 0xFF) / 255.0f)&#10;        }&#10;        return byteBuffer&#10;    }&#10;&#10;    fun classifyWithLabel(bitmap: Bitmap, extraInfo: String? = null): Bitmap {&#10;        val label = classify(bitmap)&#10;        val mutableBitmap = bitmap.copy(Bitmap.Config.ARGB_8888, true)&#10;        val canvas = android.graphics.Canvas(mutableBitmap)&#10;        val paint = android.graphics.Paint().apply {&#10;            color = android.graphics.Color.RED&#10;            textSize = 48f&#10;            style = android.graphics.Paint.Style.FILL&#10;            setShadowLayer(5f, 0f, 0f, android.graphics.Color.BLACK)&#10;        }&#10;        canvas.drawText(label, 20f, 60f, paint)&#10;        extraInfo?.let {&#10;            val infoPaint = android.graphics.Paint().apply {&#10;                color = android.graphics.Color.BLUE&#10;                textSize = 36f&#10;                style = android.graphics.Paint.Style.FILL&#10;                setShadowLayer(3f, 0f, 0f, android.graphics.Color.WHITE)&#10;            }&#10;            canvas.drawText(it, 20f, 110f, infoPaint)&#10;        }&#10;        return mutableBitmap&#10;    }&#10;&#10;    fun classifyAndShow(bitmap: Bitmap, imageView: android.widget.ImageView, extraInfo: String? = null) {&#10;        val labeledBitmap = classifyWithLabel(bitmap, extraInfo)&#10;        imageView.setImageBitmap(labeledBitmap)&#10;    }&#10;&#10;    fun saveCorrectionToDownload(context: Context, image: Bitmap, label: String, confidence: Float) {&#10;        val filename = &quot;correction_${System.currentTimeMillis()}.png&quot;&#10;        val file = android.os.Environment.getExternalStoragePublicDirectory(android.os.Environment.DIRECTORY_DOWNLOADS)&#10;        val imageFile = java.io.File(file, filename)&#10;        val fos = java.io.FileOutputStream(imageFile)&#10;        image.compress(Bitmap.CompressFormat.PNG, 100, fos)&#10;        fos.flush()&#10;        fos.close()&#10;        // Guarda la info en un archivo de texto&#10;        val infoFile = java.io.File(file, &quot;corrections.txt&quot;)&#10;        infoFile.appendText(&quot;$filename,$label,$confidence\n&quot;)&#10;        android.util.Log.d(&quot;TFLiteFamilyClassifier&quot;, &quot;Corrección guardada: $filename, $label, $confidence&quot;)&#10;    }&#10;&#10;    fun classifyWithConfidence(bitmap: Bitmap, context: Context, onResult: (String, Float) -&gt; Unit) {&#10;        val input = bitmapToByteBuffer(bitmap)&#10;        val output = Array(1) { FloatArray(labels.size) }&#10;        interpreter.run(input, output)&#10;        val maxIdx = output[0].indices.maxByOrNull { output[0][it] } ?: 0&#10;        val confidence = output[0][maxIdx]&#10;        val label = labels[maxIdx]&#10;        android.util.Log.d(&quot;TFLiteFamilyClassifier&quot;, &quot;Familia detectada: $label, confianza: $confidence&quot;)&#10;        if (confidence &lt; 0.9f) {&#10;            android.app.AlertDialog.Builder(context)&#10;                .setTitle(&quot;¿La familia detectada es correcta?&quot;)&#10;                .setMessage(&quot;Detectado: $label (confianza: ${(confidence * 100).toInt()}%)&quot;)&#10;                .setPositiveButton(&quot;Sí&quot;) { _, _ -&gt;&#10;                    saveCorrectionToDownload(context, bitmap, label, confidence)&#10;                    onResult(label, confidence)&#10;                }&#10;                .setNegativeButton(&quot;No&quot;) { _, _ -&gt;&#10;                    saveCorrectionToDownload(context, bitmap, &quot;Desconocido&quot;, confidence)&#10;                    onResult(&quot;Desconocido&quot;, confidence)&#10;                }&#10;                .show()&#10;        } else {&#10;            onResult(label, confidence)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fitsSystemWindows=&quot;true&quot;&#10;    tools:context=&quot;.MainActivity&quot;&gt;&#10;&#10;    &lt;com.google.android.material.appbar.AppBarLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:fitsSystemWindows=&quot;true&quot;&gt;&#10;&#10;        &lt;com.google.android.material.appbar.MaterialToolbar&#10;            android:id=&quot;@+id/toolbar&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;?attr/actionBarSize&quot; /&gt;&#10;&#10;    &lt;/com.google.android.material.appbar.AppBarLayout&gt;&#10;&#10;    &lt;include layout=&quot;@layout/content_main&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;        android:id=&quot;@+id/fab&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;bottom|end&quot;&#10;        android:layout_marginEnd=&quot;@dimen/fab_margin&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&#10;        app:srcCompat=&quot;@android:drawable/ic_dialog_email&quot; /&gt;&#10;&#10;&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fitsSystemWindows=&quot;true&quot;&#10;    tools:context=&quot;.MainActivity&quot;&gt;&#10;&#10;    &lt;com.google.android.material.appbar.AppBarLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:fitsSystemWindows=&quot;true&quot;&gt;&#10;&#10;        &lt;com.google.android.material.appbar.MaterialToolbar&#10;            android:id=&quot;@+id/toolbar&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;?attr/actionBarSize&quot; /&gt;&#10;&#10;    &lt;/com.google.android.material.appbar.AppBarLayout&gt;&#10;&#10;    &lt;include layout=&quot;@layout/content_main&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;        android:id=&quot;@+id/fab&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_gravity=&quot;bottom|end&quot;&#10;        android:layout_marginEnd=&quot;@dimen/fab_margin&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&#10;        app:srcCompat=&quot;@android:drawable/ic_menu_camera&quot; /&gt;&#10;&#10;&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/fragment_disclaimer.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/fragment_disclaimer.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.core.widget.NestedScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    tools:context=&quot;.DisclaimerFragment&quot;&gt;&#10;&#10;    &lt;androidx.constraintlayout.widget.ConstraintLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/textview_disclaimer&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;Las medidas y sugerencias mostradas son aproximadas y no deben tomarse como valores reales para construcción.&quot;&#10;            android:textAlignment=&quot;center&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:textColor=&quot;@android:color/black&quot;&#10;            app:layout_constraintTop_toTopOf=&quot;parent&quot;&#10;            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;            app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;            app:layout_constraintEnd_toEndOf=&quot;parent&quot; /&gt;&#10;&#10;    &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&#10;&lt;/androidx.core.widget.NestedScrollView&gt;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/navigation/nav_graph.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/navigation/nav_graph.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;navigation xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/nav_graph&quot;&#10;    app:startDestination=&quot;@id/DisclaimerFragment&quot;&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/DisclaimerFragment&quot;&#10;        android:name=&quot;com.example.ialbanil_test1.DisclaimerFragment&quot;&#10;        android:label=&quot;Aviso&quot;&#10;        tools:layout=&quot;@layout/fragment_disclaimer&quot; /&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/FirstFragment&quot;&#10;        android:name=&quot;com.example.ialbanil_test1.FirstFragment&quot;&#10;        android:label=&quot;@string/first_fragment_label&quot;&#10;        tools:layout=&quot;@layout/fragment_first&quot;&gt;&#10;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_FirstFragment_to_SecondFragment&quot;&#10;            app:destination=&quot;@id/SecondFragment&quot; /&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_FirstFragment_to_CameraFragment&quot;&#10;            app:destination=&quot;@id/CameraFragment&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/SecondFragment&quot;&#10;        android:name=&quot;com.example.ialbanil_test1.SecondFragment&quot;&#10;        android:label=&quot;@string/second_fragment_label&quot;&#10;        tools:layout=&quot;@layout/fragment_second&quot;&gt;&#10;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_SecondFragment_to_FirstFragment&quot;&#10;            app:destination=&quot;@id/FirstFragment&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/CameraFragment&quot;&#10;        android:name=&quot;com.example.ialbanil_test1.CameraFragment&quot;&#10;        android:label=&quot;Cámara&quot;&#10;        tools:layout=&quot;@layout/fragment_camera&quot;&gt;&#10;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_CameraFragment_to_FirstFragment&quot;&#10;            app:destination=&quot;@id/FirstFragment&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&lt;/navigation&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;navigation xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:id=&quot;@+id/nav_graph&quot;&#10;    app:startDestination=&quot;@id/DisclaimerFragment&quot;&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/DisclaimerFragment&quot;&#10;        android:name=&quot;com.example.ialbanil_test1.DisclaimerFragment&quot;&#10;        android:label=&quot;Aviso&quot;&#10;        tools:layout=&quot;@layout/fragment_disclaimer&quot;&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_DisclaimerFragment_to_CameraFragment&quot;&#10;            app:destination=&quot;@id/CameraFragment&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/FirstFragment&quot;&#10;        android:name=&quot;com.example.ialbanil_test1.FirstFragment&quot;&#10;        android:label=&quot;@string/first_fragment_label&quot;&#10;        tools:layout=&quot;@layout/fragment_first&quot;&gt;&#10;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_FirstFragment_to_SecondFragment&quot;&#10;            app:destination=&quot;@id/SecondFragment&quot; /&gt;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_FirstFragment_to_CameraFragment&quot;&#10;            app:destination=&quot;@id/CameraFragment&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/SecondFragment&quot;&#10;        android:name=&quot;com.example.ialbanil_test1.SecondFragment&quot;&#10;        android:label=&quot;@string/second_fragment_label&quot;&#10;        tools:layout=&quot;@layout/fragment_second&quot;&gt;&#10;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_SecondFragment_to_FirstFragment&quot;&#10;            app:destination=&quot;@id/FirstFragment&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;    &lt;fragment&#10;        android:id=&quot;@+id/CameraFragment&quot;&#10;        android:name=&quot;com.example.ialbanil_test1.CameraFragment&quot;&#10;        android:label=&quot;Cámara&quot;&#10;        tools:layout=&quot;@layout/fragment_camera&quot;&gt;&#10;&#10;        &lt;action&#10;            android:id=&quot;@+id/action_CameraFragment_to_FirstFragment&quot;&#10;            app:destination=&quot;@id/FirstFragment&quot; /&gt;&#10;    &lt;/fragment&gt;&#10;&lt;/navigation&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>